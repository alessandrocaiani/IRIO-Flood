ratioShocksSectors[t,i]<-sum(outputIO[nSectors*(0:(nItalianRegions-1))+i])/sum(outputIO_t[nSectors*(0:(nItalianRegions-1))+i])
}
outputShocks[t]<-sum(outputIO_t)
ratioShocks[t]<-sum(outputIO)/sum(outputIO_t)
}
for(i in 1:n){
orderVariationLabourShock=outputVariationLabourShock*A[i,]
expectations[i]=pastfd[i]+sum(orders[i,]+orderVariationLabourShock)
expectations2[i]=mean(pastDemand[i,(dim(pastDemand)[2]-parameters[i,"Exp"]+1):dim(pastDemand)[2]])
}
maxOutputGivenLabour=laborAvailable/laborLeontiefCoefficients
capacity[t,]=maxOutputGivenLabour
capacity_EROM[t,]=maxOutputGivenLabour[1,302:344]
expectations_l=pmin(expectations,maxOutputGivenLabour)     #eq3
vec_inventoryShock<-as.numeric(1-t(inventoryShock[,t]))
availableInputs2<-availableInputs * rep(vec_inventoryShock, rep.int(nrow(availableInputs),length(vec_inventoryShock)))
availableInputs2[ArtIndices,]<-Inf
matrix_demand=t(matrix(rep(expectations,n),ncol=n))   #desired output matrix
maxOutputGivenIntermediateInputsLeontief=availableInputs2/A
maxOutputGivenIntermediateInputsLeontief[is.nan(maxOutputGivenIntermediateInputsLeontief)]=Inf
if(TradLeontief==1){
epsilon[,]<-epsilon_max
weightedOutput=matrix_demand*(1-(epsilon/epsilon_max))+(epsilon/epsilon_max)*maxOutputGivenIntermediateInputsLeontief
}else{
weightedOutput=matrix_demand*(1-(epsilon/epsilon_max))+(epsilon/epsilon_max)*pmin(matrix_demand,maxOutputGivenIntermediateInputsLeontief)
}
maxOutputGivenImports=availableImports/importCoeffs
maxOutputGivenImports[is.nan(maxOutputGivenImports)]=Inf
maxOutputFeasible=pmin(maxOutputGivenLabour,pmin(maxOutputGivenImports,colMins(weightedOutput)))
producible[t,]=maxOutputFeasible
producibleTotal[t]<-sum(maxOutputFeasible)
for(i in 1:(nItalianRegions-1)){
producibleRegions[t,i]<-sum(maxOutputFeasible[1,((i-1)*nSectors+1):((i-1)*nSectors+nSectors)])
}
for(i in 1:nSectors){
producibleSectors[t,i]<-sum(maxOutputFeasible[1,nSectors*(0:(nItalianRegions-1))+i])
}
ratio[t,]<-maxOutputFeasible[1,]
#if productioin constrained by labor and demand>production feasible, then allow sectors not subject to labor input exogenous constraints
#(i.e. those having >= workers than at the beginning) to hire additional workers
hiringSectors=which(((laborAvailable[1,]/laborLeontiefCoefficients[1,])<pmin(maxOutputGivenImports,colMins(weightedOutput)))&(laborAvailable[1,]>=laborAvailable1[1,])&(expectations>t(maxOutputFeasible)))
hiringSectors_EROM=which(((laborAvailable[1,302:344]/laborLeontiefCoefficients[1,302:344])<pmin(maxOutputGivenImports[302:344],colMins(weightedOutput[302:344,302:344])))&(laborAvailable[1,302:344]>=laborAvailable1[1,302:344])&(expectations[302:344]>t(maxOutputFeasible[302:344])))
Num_hiringSectors[t]<-length(hiringSectors)
Num_hiringSectors_EROM[t]<-length(hiringSectors_EROM)
laborAvailable[hiringSectors]=expectations[hiringSectors]*laborLeontiefCoefficients[hiringSectors]
maxOutputGivenLabour=laborAvailable/laborLeontiefCoefficients
capacity2[t,]=maxOutputGivenLabour
capacity_EROM2[t,]=maxOutputGivenLabour[1,302:344]
expectations_l=pmin(expectations,maxOutputGivenLabour)
maxOutputFeasible=pmin(maxOutputGivenLabour,pmin(maxOutputGivenImports,colMins(weightedOutput)))
bottlenecks[,t]=colMins(weightedOutput)
bottlenecks_EROM[,t]=colMins(weightedOutput[302:344,302:344])
xxx<-round(colMins(maxOutputGivenIntermediateInputsLeontief),digits=2)
yyy<-round(colMins(weightedOutput),digits=2)
for (i in 1:(nSectors*nItalianRegions)) {
if(round(maxOutputFeasible[1,i],digits=2)==round(maxOutputGivenLabour[1,i],digits=2)){
check1[i,t]<-1   #feasible output is constrained by labor
}
if (round(maxOutputFeasible[1,i],digits=2)==yyy[i] & round(maxOutputFeasible[1,i],digits=2)!=round(maxOutputGivenLabour[1,i],digits=2) & yyy[i]==round(matrix_demand[1,i],digits=2)){
check2[i,t]<-1   #feasible output not constrained by labor and equal to demand (no connection b/w sectors: epsilon/epsilon_max=0)
}
if (round(maxOutputFeasible[1,i],digits=2)==yyy[i] & round(maxOutputFeasible[1,i],digits=2)!=round(maxOutputGivenLabour[1,i],digits=2) & yyy[i]<round(matrix_demand[1,i],digits=2)){
check3[i,t]<-1   #feasible output not constrained by labor and given by the interconnection b/w demand and stock of inputs (i.e. inputs shortages matter)
}
if (xxx[i]==0){
check4[i,t]<-1
}
}
check1_EROM<-check1[302:344,]
check2_EROM<-check2[302:344,]
check3_EROM<-check3[302:344,]
check4_EROM<-check4[302:344,]
#every sector computes the inputs required to satisfy its expected total demand given by observed current period final demand and past-period orders by opther sectors
inputsRequiredGivenDemand=A * rep(expectations_l, rep.int(nrow(A),length(expectations_l)))
inputsRequiredGivenDemand2=A * rep(expectations2, rep.int(nrow(A),length(expectations2)))
importsRequiredGivenDemand=importCoeffs*expectations_l
importsRequiredGivenDemand2=importCoeffs*expectations2
totalExpectedDemand=sum(expectations_l[1:(nItalianRegions*nSectors)])
#every sector demands inputs based on what he needed to produce desired outpout, inventories left from previous period, and targeted inventories given the new expected demand
#these inputs will be available for next period production. Current production is based on past inventories (i.e. past period orders)
orderMat=inputsRequiredGivenDemand2 * rep(parameters[,"timeScale"], rep.int(nrow(inputsRequiredGivenDemand2),length(parameters[,"timeScale"])))
orderMat=orderMat-availableInputs
futureOrders=orderMat * rep(parameters[,"speedInv"], rep.int(nrow(orderMat),length(parameters[,"speedInv"])))
orders=pmax(matrix(0,n,n),inputsRequiredGivenDemand+futureOrders)
importsDeviation=importsRequiredGivenDemand2*parameters[,"timeScale"]
importsDeviation=importsDeviation-availableImports
futureImports=parameters[,"speedInv"]*importsDeviation
ordersImports=pmax(0,importsRequiredGivenDemand+futureImports)
#the demand received by each sector in the period is its fd plus orders received from other sectors
demand=fd+rowSums(orders)
for (i in 1:(nSectors*nItalianRegions)) {
matcheck=matrix_demand[1,]
if((demand[i]+Exp[i])>matcheck[i]){
check5[i,t]<-1   #actual demand is greater than expected demand (sectors might have produced less)
}
}
check5_EROM<-check5[302:344,]
pastfd=fd+Exp
demandTotal[t]<-sum(demand+Exp)
ratio[t,]<-(demand[,1]+Exp)/ratio[t,]
ratioTotal[t]<-sum(baselineOutput/sum(baselineOutput)*ratio[t,],na.rm = TRUE)
for(i in 1:(nItalianRegions-1)){
demandRegions[t,i]<-sum(demand[((i-1)*nSectors+1):((i-1)*nSectors+nSectors),1]+Exp[((i-1)*nSectors+1):((i-1)*nSectors+nSectors)])
ratioRegions[t,i]<-sum(baselineOutput[((i-1)*nSectors+1):((i-1)*nSectors+nSectors)]/sum(baselineOutput[((i-1)*nSectors+1):((i-1)*nSectors+nSectors)])*ratio[t,((i-1)*nSectors+1):((i-1)*nSectors+nSectors)],na.rm = TRUE)
}
for(i in 1:nSectors){
demandSectors[t,i]<-sum(demand[nSectors*(0:(nItalianRegions-1))+i,1]+Exp[nSectors*(0:(nItalianRegions-1))+i])
ratioSectors[t,i]<-sum(baselineOutput[nSectors*(0:(nItalianRegions-1))+i]/sum(baselineOutput[nSectors*(0:(nItalianRegions-1))+i])*ratio[t,nSectors*(0:(nItalianRegions-1))+i],na.rm = TRUE)
}
for(i in 1:(nItalianRegions-1)){
expectationsRegions[t,i]<-sum(expectations[((i-1)*nSectors+1):((i-1)*nSectors+nSectors)])
}
#production takes place after sectors observe demand
Exp=pmin(Exp,maxOutputFeasible)
matrix_demand=t(matrix(rep(demand+Exp,n),ncol=n))   #desired output matrix
if(TradLeontief==1){
epsilon[,]<-epsilon_max
weightedOutput=matrix_demand*(1-(epsilon/epsilon_max))+(epsilon/epsilon_max)*maxOutputGivenIntermediateInputsLeontief
}else{
weightedOutput=matrix_demand*(1-(epsilon/epsilon_max))+(epsilon/epsilon_max)*pmin(matrix_demand,maxOutputGivenIntermediateInputsLeontief)
}
maxOutputFeasible=pmin(maxOutputGivenLabour,pmin(maxOutputGivenImports,colMins(weightedOutput)))
#the production actually delivered
if(TradLeontief==1){
productionDelivered=Exp+pmin(maxOutputFeasible-Exp,demand)
}else{
productionDelivered=maxOutputFeasible
}
bottlenecks[,t]=bottlenecks[,t]==productionDelivered
bottlenecks_EROM[,t]=bottlenecks_EROM[,t]==productionDelivered[,302:344]
for(i in 1:n){
if(bottlenecks[i,t]==1 & check3[i,t]==1){
bottlenecks_inputs[i,t]=1
}
}
for(i in 1:nSectors){
if(bottlenecks_EROM[i,t]==1 & check3_EROM[i,t]==1){
bottlenecks_inputs_EROM[i,t]=1
}
}
delivered[,t]=t(productionDelivered)
outputTotal[t]=sum(productionDelivered)
for(i in 1:(nItalianRegions-1)){
sales[t,i]=sum(delivered[((i-1)*nSectors+1):((i-1)*nSectors+nSectors),t])
capacityRegions[t,i]=sum(capacity[t,((i-1)*nSectors+1):((i-1)*nSectors+nSectors)])
}
for(i in 1:length(sectorAvail)){
sec=sectorAvail[i]
for(j in 1:nItalianRegions){
prod_sectors[t,i]=prod_sectors[t,i]+productionDelivered[1,(sectorAvail[i]+nSectors*(j-1))]
}
}
for(i in 1:length(sectorAvail)){
sec2=sectorAvail[i]
prod_sectors_EROM[t,i]=prod_sectors_EROM[t,i]+productionDelivered[1,(sectorAvail[i]+301)]
}
for(i in 1:nSectors){
sec=i
for(j in 1:nItalianRegions){
sales_sectors[t,i]=sales_sectors[t,i]+productionDelivered[1,(sec+nSectors*(j-1))]
capacitySectors[t,i]=capacitySectors[t,i]+capacity[t,(sec+nSectors*(j-1))]
}
}
#is there a supply constraint?
constraint=t(productionDelivered-Exp)/demand
constraint[demand==0]=1
#what is the ratio between capacity of production and demand?
productionDemand[t,]=maxOutputFeasible/t(demand+Exp)
productionDemandAggregate=sum(maxOutputFeasible[1,1:(nItalianRegions*nSectors)])/sum(demand[1:(nItalianRegions*nSectors)]+Exp[1:(nItalianRegions*nSectors)])
#production consumes inputs of production...
availableInputs=availableInputs-A * rep(productionDelivered, rep.int(nrow(A),length(productionDelivered)))
availableInputs[ArtIndices,]<-pmax(0,availableInputs[ArtIndices,])
availableImports=availableImports-importCoeffs*productionDelivered
availableImports=as.vector(availableImports)
#at the end of the period/beginning of next period inputs are replenished with new inputs
#ordered at the beginning and delivered at the end after production takes place
ordersDelivered=orders
ordersDelivered=orders*as.vector(constraint)
importsDelivered=ordersImports
#Inventories are replenished...
availableInputs=availableInputs+ordersDelivered
availableImports=availableImports+importsDelivered
changeInventories=availableInputs-inputsStart
changeImports=availableImports-importsStart
fdDelivered=fd*as.vector(constraint)
fdDelivered=fdDelivered+Exp
GDP[t]=sum(fdDelivered)+sum(changeInventories)-sum(importsDelivered)+sum(changeImports)+Taxes
if(t==1){
fdBaseline=fdDelivered
fdShocks=fdBaseline
restBaseline=sum(changeInventories)-sum(importsDelivered)+sum(changeImports)+Taxes
GDPShocks[t]=sum(fdDelivered)+sum(changeInventories)-sum(importsDelivered)+sum(changeImports)+Taxes
}else{
fdShocks=fdShocks+fdBaseline*productionShock[,t]/100
GDPShocks[t]=sum(fdShocks)+restBaseline
}
for(i in 1:(nItalianRegions-1)){
GDP_regions[t,i]=sum(fdDelivered[((i-1)*nSectors+1):((i-1)*nSectors+nSectors),1])+sum(changeInventories[,((i-1)*43+1):((i-1)*43+43)])-sum(importsDelivered[((i-1)*43+1):((i-1)*43+43)])+sum(changeImports[((i-1)*43+1):((i-1)*43+43)])+Taxes_regions[i]
}
Inv[t]=sum(inv*as.vector(constraint))
consumption=consumption*as.vector(constraint)
c_all=rowSums(c_all)
c_all=c_all*as.vector(constraint)
c_all_delivered[t]=sum(c_all)
Cons[t]=sum(consumption)
demand=demand+Exp
pastDemand=cbind(pastDemand[,2:dim(pastDemand)[2]],demand)
#END OF SIMULATION LOOP
}
GDPLossEmilia_1y=1-sum(GDP_regions[5:56,8])/(GDP_regions[1,8]*52)
View(GDP_regions[,8])
View(GDP_regions)
View(IO)
labels()
View(prod_sectors_EROM)
?rowsum
?colSums
a=matrix(2,2)
View(a)
?matrix?
a=matrix(c(1,2,3,4),2,2)
a
colSums()
colSums(a)
rowSums(a)
outputEmilia=rowSums(prod_sectors_EROM)
View(outputIO)
uoutputIO[43*8]
outputIO[43*8]
outputIO[43*7]
sum(outputIO[(43*7+1):43*8])
sum(outputIO[(43*7+1):(43*8)])
outputEmilia
outputLossEmilia=1- sum(outputEmilia[5:56])/(outputEmilia[1]*52)
resultSensitivity<-list("GDPLossEmilia_1y"=GDPLossEmilia_1y, "outputLossEmilia"=outputLossEmilia)  # create dataframe
View(resultSensitivity)
result<-as.data.frame(array(data=NA,dim=c(nrow(Sample),1),dimnames=list(NULL,c("EmiliaGDPloss"))))
View(result)
result<-as.data.frame(array(data=NA,dim=c(nrow(Sample),2),dimnames=list(NULL,c("EmiliaGDPloss"))))
result<-as.data.frame(array(data=NA,dim=c(nrow(Sample),2),dimnames=list(NULL,c("EmiliaGDPloss","EmiliaOutputLoss"))))
View(result)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(result)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(result)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fit)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/ModelEstimation_SensitivityEmiliaFlood.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fit)
View(fit)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fits)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fit)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fit)
View(fit)
View(fits)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(Sample)
View(fits)
View(fit)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fits)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
j=1
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=108
# for Sensitivity y:
source("ModelEstimation_SensitivityEmiliaFlood.R")
params=as.numeric(Sample[j,1:length(Sample[j,])])
result<-runModel(IO,measures,coefficienti_consumo,params,nbRounds,LD_Emilia_hazus,LD_Emilia_ins_M,LossRatio_Emilia_I,scenario,nodemand,epsilon)
View(result)
x <- foreach(a=1:3, b=rep(10, 3)) %do% {
a + b
}
x
fits[j]=result
result
result[]
result[[]]
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=108
# for Sensitivity y:
source("ModelEstimation_SensitivityEmiliaFlood.R")
params=as.numeric(Sample[j,1:length(Sample[j,])])
result<-runModel(IO,measures,coefficienti_consumo,params,nbRounds,LD_Emilia_hazus,LD_Emilia_ins_M,LossRatio_Emilia_I,scenario,nodemand,epsilon)
#Loss<-result
fits[j]=result
j
result
fits[j,]=result
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fit)
j=1
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=108
# for Sensitivity y:
source("ModelEstimation_SensitivityEmiliaFlood.R")
params=as.numeric(Sample[j,1:length(Sample[j,])])
result<-runModel(IO,measures,coefficienti_consumo,params,nbRounds,LD_Emilia_hazus,LD_Emilia_ins_M,LossRatio_Emilia_I,scenario,nodemand,epsilon)
#Loss<-result
View(fits)
View(fits)
for(i in 1:length(fits)){
fit[i,]<-fits[i,]
}
View(fits)
for(i in 1:length(fits)){
fit[i,]<-fits[[i]]
}
View(fit)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
i
#.libPaths(c("/mnt/beegfs/jlenia.dinoia/pkgR", .libPaths()))
library(readxl)
library(readr)
library(foreach)
library(doParallel)
cl<-makeCluster((15), outfile="")
#numCores <- detectCores()
#cl<-makeCluster(numCores[1]-11, outfile="")
#print(cl)
#clusterEvalQ(cl, .libPaths(c("/mnt/beegfs/jlenia.dinoia/pkgR", .libPaths())))
registerDoParallel(cl)
nstats=26
TradLeontief=0  #0=modified Leontief 1=traditional Leontief
#import the IO table
IO <- readRDS("IO_ITAregions.rds")
measures <- readRDS("measures_spese_flood.rds")
#import the H matrix
coefficienti_consumo <- readRDS("H.rds")
#import the epsilon for the modified Leontief model
epsilon<-readRDS("matrix_gamma_flood_43sect.rds")
##Labor shocks using Hazus restoration times:
LD_Emilia_hazus <- read_csv("lab_shocks_EROMgeoloc.csv")
##Labor shocks using insurance claims' business interruption data related to machinery damages:
LD_Emilia_ins_M <- read_csv("output_shocks_EROMgeoloc_M.csv")
##Shocks to inventories using insurance claims' loss ratio:
LossRatio_Emilia_I <- read_csv("LR_shocks_EROMgeoloc_I_met2.csv")
# choose scenario to run (1=hazus downtime periods; 2=insurance claims)
scenario=1
nodemand=0
Sample<-as.data.frame(readRDS("Sample_SensEmiliaFlood_datacenter.rds"))
Sample<-Sample[1:2,]
lossesEmilia<-as.data.frame(array(data=NA,dim=c(nrow(Sample),2),dimnames=list(NULL,c("EmiliaGDPloss","EmiliaOutputLoss"))))
fits<-foreach(j=1:2, .errorhandling = 'remove', .multicombine=TRUE) %dopar% {
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=108
# for Sensitivity y:
source("ModelEstimation_SensitivityEmiliaFlood.R")
params=as.numeric(Sample[j,1:length(Sample[j,])])
result<-runModel(IO,measures,coefficienti_consumo,params,nbRounds,LD_Emilia_hazus,LD_Emilia_ins_M,LossRatio_Emilia_I,scenario,nodemand,epsilon)
c(result)
}
#.libPaths(c("/mnt/beegfs/jlenia.dinoia/pkgR", .libPaths()))
library(readxl)
library(readr)
library(foreach)
library(doParallel)
cl<-makeCluster((15), outfile="")
#numCores <- detectCores()
#cl<-makeCluster(numCores[1]-11, outfile="")
#print(cl)
#clusterEvalQ(cl, .libPaths(c("/mnt/beegfs/jlenia.dinoia/pkgR", .libPaths())))
registerDoParallel(cl)
nstats=26
TradLeontief=0  #0=modified Leontief 1=traditional Leontief
#import the IO table
IO <- readRDS("IO_ITAregions.rds")
measures <- readRDS("measures_spese_flood.rds")
#import the H matrix
coefficienti_consumo <- readRDS("H.rds")
#import the epsilon for the modified Leontief model
epsilon<-readRDS("matrix_gamma_flood_43sect.rds")
##Labor shocks using Hazus restoration times:
LD_Emilia_hazus <- read_csv("lab_shocks_EROMgeoloc.csv")
##Labor shocks using insurance claims' business interruption data related to machinery damages:
LD_Emilia_ins_M <- read_csv("output_shocks_EROMgeoloc_M.csv")
##Shocks to inventories using insurance claims' loss ratio:
LossRatio_Emilia_I <- read_csv("LR_shocks_EROMgeoloc_I_met2.csv")
# choose scenario to run (1=hazus downtime periods; 2=insurance claims)
scenario=1
nodemand=0
Sample<-as.data.frame(readRDS("Sample_SensEmiliaFlood_datacenter.rds"))
Sample<-Sample[1:2,]
lossesEmilia<-as.data.frame(array(data=NA,dim=c(nrow(Sample),2),dimnames=list(NULL,c("EmiliaGDPloss","EmiliaOutputLoss"))))
fits<-foreach(j=1:nrow(Sample), .errorhandling = 'remove', .multicombine=TRUE) %dopar% {
View(lossesEmilia)
View(lossesEmilia)
View(lossesEmilia)
j=1
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=108
# for Sensitivity y:
source("ModelEstimation_SensitivityEmiliaFlood.R")
params=as.numeric(Sample[j,1:length(Sample[j,])])
result<-runModel(IO,measures,coefficienti_consumo,params,nbRounds,LD_Emilia_hazus,LD_Emilia_ins_M,LossRatio_Emilia_I,scenario,nodemand,epsilon)
fits<-foreach(j=1:nrow(Sample), .errorhandling = 'remove', .multicombine=TRUE) %dopar% {
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=108
# for Sensitivity y:
source("ModelEstimation_SensitivityEmiliaFlood.R")
params=as.numeric(Sample[j,1:length(Sample[j,])])
result<-runModel(IO,measures,coefficienti_consumo,params,nbRounds,LD_Emilia_hazus,LD_Emilia_ins_M,LossRatio_Emilia_I,scenario,nodemand,epsilon)
c(result)
}
View(fits)
for(i in 1:length(fits)){
lossesEmilia[i,]<-fits[[i]]
}
View(lossesEmilia)
saveRDS(lossesEmilia,file = "EmiliaGDPLoss_Sensitivity.rds")
View(lossesEmilia)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fits)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
# for Sensitivity y:
source("ModelEstimation_SensitivityEmiliaFlood.R")
params=as.numeric(Sample[j,1:length(Sample[j,])])
library(readxl)
library(readr)
library(foreach)
library(doParallel)
cl<-makeCluster((15), outfile="")
#numCores <- detectCores()
#cl<-makeCluster(numCores[1]-11, outfile="")
#print(cl)
#clusterEvalQ(cl, .libPaths(c("/mnt/beegfs/jlenia.dinoia/pkgR", .libPaths())))
registerDoParallel(cl)
nstats=26
TradLeontief=0  #0=modified Leontief 1=traditional Leontief
#import the IO table
IO <- readRDS("IO_ITAregions.rds")
measures <- readRDS("measures_spese_flood.rds")
#import the H matrix
coefficienti_consumo <- readRDS("H.rds")
#import the epsilon for the modified Leontief model
epsilon<-readRDS("matrix_gamma_flood_43sect.rds")
##Labor shocks using Hazus restoration times:
LD_Emilia_hazus <- read_csv("lab_shocks_EROMgeoloc.csv")
##Labor shocks using insurance claims' business interruption data related to machinery damages:
LD_Emilia_ins_M <- read_csv("output_shocks_EROMgeoloc_M.csv")
##Shocks to inventories using insurance claims' loss ratio:
LossRatio_Emilia_I <- read_csv("LR_shocks_EROMgeoloc_I_met2.csv")
# choose scenario to run (1=hazus downtime periods; 2=insurance claims)
scenario=1
nodemand=0
Sample<-as.data.frame(readRDS("Sample_SensEmiliaFlood_datacenter.rds"))
Sample<-Sample[1:2,]
lossesEmilia<-as.data.frame(array(data=NA,dim=c(nrow(Sample),2),dimnames=list(NULL,c("EmiliaGDPloss","EmiliaOutputLoss"))))
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fits)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
nbRounds
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
nrow(Sample)
1:2
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fits)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fits)
EmiliaGDPLoss_Sensitivity <- readRDS("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/EmiliaGDPLoss_Sensitivity.rds")
View(EmiliaGDPLoss_Sensitivity)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Model/EMILIA_runModel_REV1.R")
setwd("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Model")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Model/EMILIA_runModel_REV1.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
setwd("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/Estimation_SensitivityEmiliaFlood_datacenter.R")
View(fits)
View(lossesEmilia)
setwd("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Estimation_Sensitivity_datacenter.R")
EmiliaGDPLoss_Sensitivity <- readRDS("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/EmiliaGDPLoss_Sensitivity.rds")
View(EmiliaGDPLoss_Sensitivity)
setwd("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/srcSensitivity")
#import the IO table
IO <- readRDS("../IO_ITAregions.rds")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/srcSensitivity/main_SensitivityEmiliaFlood_datacenter.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/SENSITIVITY/Sensitivity Emilia/srcSensitivity/main_SensitivityEmiliaFlood_datacenter.R")

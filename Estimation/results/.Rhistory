lines(expenditure_q_3_Leontief[,3], type="l", lty=1, lwd=1.7, col="chartreuse4")
plot(prod_sectors_m[,22], yaxt="n", xaxt='n', main="Construction", cex.main=1.8, type="l", lwd=2.0, col="brown3", ylim=c(10,125), xlab= "", ylab="", cex.axis=1)
lines(IP_18[,22], type="l", lty=2, lwd=1.7, col="blue")
lines(prod_sectors_m_Leontief[,22], type="l", lty=1, lwd=2.0, col="chartreuse4")
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
axis(1, at=c(1,4,7,10,13,16), labels=c("Jan 2020","Apr 2020","July 2020","Oct 2020","Jan 2021","Apr 2021"), cex.axis=1.4)
#axis(1, at=c(1,4,7,10), labels=c("Jan 2020","Apr 2020","July 2020","Oct 2020"), cex.axis=1.4)
axis(2, at=c(20,60,100), labels=c("20","60","100"),cex.axis=1.4)
abline(v=1:18, col="lightgray", lty="dotted")
#abline(v=1:12, col="lightgray", lty="dotted")
#Construction
plot(prod_sectors_m[,22], yaxt="n", xaxt='n', main="Construction", cex.main=1.8, type="l", lwd=2.0, col="brown3", ylim=c(10,125), xlab= "", ylab="", cex.axis=1)
lines(IP_18[,22], type="l", lty=2, lwd=1.7, col="blue")
lines(prod_sectors_m_Leontief[,22], type="l", lty=1, lwd=2.0, col="chartreuse4")
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
axis(1, at=c(1,4,7,10,13,16), labels=c("Jan 2020","Apr 2020","July 2020","Oct 2020","Jan 2021","Apr 2021"), cex.axis=1.4)
#axis(1, at=c(1,4,7,10), labels=c("Jan 2020","Apr 2020","July 2020","Oct 2020"), cex.axis=1.4)
axis(2, at=c(20,60,100), labels=c("20","60","100"),cex.axis=1.4)
abline(v=1:18, col="lightgray", lty="dotted")
#abline(v=1:12, col="lightgray", lty="dotted")
plot(prod_sectors[,22], yaxt="n", xaxt='n', main="Construction", cex.main=1.8, type="l", lwd=2.0, col="brown3", ylim=c(10,125), xlab= "", ylab="", cex.axis=1)
lines(IP_18[,22], type="l", lty=2, lwd=1.7, col="blue")
lines(prod_sectors_m_Leontief[,22], type="l", lty=1, lwd=2.0, col="chartreuse4")
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
axis(1, at=c(1,4,7,10,13,16), labels=c("Jan 2020","Apr 2020","July 2020","Oct 2020","Jan 2021","Apr 2021"), cex.axis=1.4)
#axis(1, at=c(1,4,7,10), labels=c("Jan 2020","Apr 2020","July 2020","Oct 2020"), cex.axis=1.4)
axis(2, at=c(20,60,100), labels=c("20","60","100"),cex.axis=1.4)
abline(v=1:18, col="lightgray", lty="dotted")
#abline(v=1:12, col="lightgray", lty="dotted")
load("Workspace_EST_tradL.Rdata")
prod_sectors_Leontief=prod_sectors
prod_sectors_m_Leontief=prod_sectors_m
prod_sectors_q_Leontief=prod_sectors_q
expenditure_3_absolute_Leontief=expenditure_3_absolute
expenditure_m_Leontief=expenditure_m
expenditure_m_3_leontief=expenditure_m_3
expenditure_q_Leontief=expenditure_q_Leontief
expenditure_q_3_Leontief=expenditure_q_3
load("Workspace_EST_functEpsilon.Rdata")
#Construction
plot(prod_sectors_m[,22], yaxt="n", xaxt='n', main="Construction", cex.main=1.8, type="l", lwd=2.0, col="brown3", ylim=c(10,125), xlab= "", ylab="", cex.axis=1)
lines(IP_18[,22], type="l", lty=2, lwd=1.7, col="blue")
lines(prod_sectors_m_Leontief[,22], type="l", lty=1, lwd=2.0, col="chartreuse4")
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
axis(1, at=c(1,4,7,10,13,16), labels=c("Jan 2020","Apr 2020","July 2020","Oct 2020","Jan 2021","Apr 2021"), cex.axis=1.4)
#axis(1, at=c(1,4,7,10), labels=c("Jan 2020","Apr 2020","July 2020","Oct 2020"), cex.axis=1.4)
axis(2, at=c(20,60,100), labels=c("20","60","100"),cex.axis=1.4)
abline(v=1:18, col="lightgray", lty="dotted")
#abline(v=1:12, col="lightgray", lty="dotted")
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=80
source("ModelEstimation_REV1_DiffCons.R")
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=80
source("ModelEstimation_REV1_DiffCons.R")
setwd("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/results")
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=80
source("ModelEstimation_REV1_DiffCons.R")
source("ModelEstimation_REV1_DiffCons.R")
setwd("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/results")
source("ModelEstimation_REV1_DiffCons.R")
source("../ModelEstimation_REV1_DiffCons.R")
Sample <- read_csv("../resources/Sample_FullParamSpace_REV1_DiffCons.csv")
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
View(params)
params
IO <- readRDS("resources/IO_DiffCons.rds")
IO_noCons <- readRDS("resources/IO_noCons.rds")
measures <- readRDS("resources/measures_spese_flood.rds")
coefficienti_consumo <- readRDS("resources/H.rds")
ExpService <- read_csv("resources/ExportsServices2020_flood.csv",col_names = FALSE)
ExpService<-ExpService[-1,-1]
IO <- readRDS("../resources/IO_DiffCons.rds")
IO_noCons <- readRDS("../resources/IO_noCons.rds")
measures <- readRDS("../resources/measures_spese_flood.rds")
coefficienti_consumo <- readRDS("../resources/H.rds")
ExpService <- read_csv("../resources/ExportsServices2020_flood.csv",col_names = FALSE)
ExpService<-ExpService[-1,-1]
ExpSectoral <- read_csv("resources/ExportsSectoral2020_flood.csv")
IO_noCons <- readRDS("../resources/IO_noCons.rds")
measures <- readRDS("../resources/measures_spese_flood.rds")
IO_noCons <- readRDS("../resources/IO_noCons.rds")
measures <- readRDS("../resources/measures_spese_flood.rds")
coefficienti_consumo <- readRDS("../resources/H.rds")
ExpService <- read_csv("../resources/ExportsServices2020_flood.csv",col_names = FALSE)
ExpService<-ExpService[-1,-1]
ExpSectoral <- read_csv("../resources/ExportsSectoral2020_flood.csv")
ExpSectoral<-ExpSectoral[,-(1:2)]
LD <- read_csv("../resources/lab_shocks_estimation_80rounds.csv")
matrix_gamma_flood_43sect<-readRDS("../resources/matrix_gamma_flood_43sect.rds")
epsilon <-matrix_gamma_flood_43sect
# mobility 80 weeks:
mobility <- as.data.frame(readRDS("resources/weeklyMobility_flood.rds"))
mobility<-mobility[,3:22]
# mobility 80 weeks:
mobility <- as.data.frame(readRDS("../resources/weeklyMobility_flood.rds"))
mobility<-mobility[,3:22]
result<-runModel(IO,measures,coefficienti_consumo,params,nbRounds,LD,ExpService,ExpSectoral,epsilon,IO_noCons,mobility)
View(result)
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=80
source("../ModelEstimation_REV1_DiffCons.R") #for model with modified Leontief
Sample <- read_csv("../resources/Sample_FullParamSpace_REV1_DiffCons.csv")
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
MSMresults <- readRDS("MSM_REV1_DiffCons_EXP.rds")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/results/RunEstimatedModel.R")
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=80
source("../ModelEstimation_REV1_DiffCons.R") #for model with modified Leontief
Sample <- read_csv("../resources/Sample_FullParamSpace_REV1_DiffCons.csv")
MSMresults <- readRDS("MSM_REV1_DiffCons_EXP.rds")
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
IO <- readRDS("../resources/IO_DiffCons.rds")
IO_noCons <- readRDS("../resources/IO_noCons.rds")
measures <- readRDS("../resources/measures_spese_flood.rds")
coefficienti_consumo <- readRDS("../resources/H.rds")
ExpService <- read_csv("../resources/ExportsServices2020_flood.csv",col_names = FALSE)
ExpService<-ExpService[-1,-1]
ExpSectoral <- read_csv("../resources/ExportsSectoral2020_flood.csv")
ExpSectoral<-ExpSectoral[,-(1:2)]
LD <- read_csv("../resources/lab_shocks_estimation_80rounds.csv")
matrix_gamma_flood_43sect<-readRDS("../resources/matrix_gamma_flood_43sect.rds")
epsilon <-matrix_gamma_flood_43sect
# mobility 80 weeks:
mobility <- as.data.frame(readRDS("../resources/weeklyMobility_flood.rds"))
mobility<-mobility[,3:22]
result<-runModel(IO,measures,coefficienti_consumo,params,nbRounds,LD,ExpService,ExpSectoral,epsilon,IO_noCons,mobility)
Sample<-as.data.frame(read.csv("../resources/Sample_FullParamSpace_REV1_DiffCons.csv",header=TRUE),header=FALSE)
Sample<-Sample[1:50000,]
MSMresults <- readRDS("MSM_REV1_DiffCons_EXP.rds")
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
IO <- readRDS("../resources/IO_DiffCons.rds")
IO_noCons <- readRDS("../resources/IO_noCons.rds")
measures <- readRDS("../resources/measures_spese_flood.rds")
Sample<-as.data.frame(read.csv("../resources/Sample_FullParamSpace_REV1_DiffCons.csv",header=TRUE),header=FALSE)
Sample<-Sample[1:50000,]
MSMresults <- readRDS("MSM_REV1_DiffCons_EXP.rds")
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
S
Sample<-Sample[1:50000,]
Sample<-Sample[1:50000,]
MSMresults <- readRDS("MSM_REV1_DiffCons_EXP.rds")
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])]
View(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
View(Sample)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/results/RunEstimatedModel.R")
library(matrixStats)
library(readxl)
library(readr)
nstats=26
nbRounds=80
source("../ModelEstimation_REV1_DiffCons.R") #for model with modified Leontief
Sample <- read_csv("../resources/Sample_FullParamSpace_REV1_DiffCons.csv")
MSMresults <- readRDS("MSM_REV1_DiffCons_EXP.rds")
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
IO <- readRDS("../resources/IO_DiffCons.rds")
IO_noCons <- readRDS("../resources/IO_noCons.rds")
measures <- readRDS("../resources/measures_spese_flood.rds")
coefficienti_consumo <- readRDS("../resources/H.rds")
ExpService <- read_csv("../resources/ExportsServices2020_flood.csv",col_names = FALSE)
ExpService<-ExpService[-1,-1]
ExpSectoral <- read_csv("../resources/ExportsSectoral2020_flood.csv")
ExpSectoral<-ExpSectoral[,-(1:2)]
LD <- read_csv("../resources/lab_shocks_estimation_80rounds.csv")
matrix_gamma_flood_43sect<-readRDS("../resources/matrix_gamma_flood_43sect.rds")
epsilon <-matrix_gamma_flood_43sect
# mobility 80 weeks:
mobility <- as.data.frame(readRDS("../resources/weeklyMobility_flood.rds"))
mobility<-mobility[,3:22]
library(matrixStats)
n=measures$n
nSectors=measures$nSectors
nFD=16
nItalianRegions=measures$nItalianRegions
nbRounds=80
IO=IO/52
IO[IO<0]=0
IO_noCons=IO_noCons/52
IO_noCons[IO_noCons<0]=0
production=rowSums(IO[1:n,])
production[production==0]<-0.00000001
Z = as.matrix(IO[1:n,1:n])
Z[Z<0]=0
x <- diag(1/production)
A <- Z %*% x
## to avoid "ITA external" messing things up
A[861:903,]<-0
ArtIndices=c(nSectors*(0:(nItalianRegions-1)))
ArtIndices=ArtIndices+(nSectors-1)
## calibrated indexes with new6 files
ExpService=as.numeric(ExpService$X3)/100                                               #ExpService contains weakly values (53 for 2020 and 27 for 2021) of total export services
ExpSectoral=ExpSectoral[,1:23]/100                                                     #In ExpSectoral there are 53+27 rows for weeks and 17 columns representing 17 goods' sectors (service sectors (15) are excluded)
ExpIndex=as.data.frame(array(data=NA,dim=c(nbRounds,nSectors*nItalianRegions)))        #(80x903)ServSectors=c(18:nSectors)
ServSectors=c(24:nSectors)                                                             #From sector 23 -included- to sector 43 we have services (43-17=26)
ExpServices<-array(data=NA,dim=c(length(ExpService),length(ServSectors)))
ExpServices[,]<-ExpService                                                             #the time series is the same for all service sectors
ExpSectoral[,22]<-ExpService
ExpCombined<-cbind(ExpSectoral,ExpServices)                                            #exp for each of the 43 sectors
for(i in 1:(nItalianRegions-1)){
ExpIndex[,((i-1)*nSectors+1):((i-1)*nSectors+nSectors)]<-ExpCombined[1:nbRounds,]    #for each italian region (1:20; reg-1 excludes 21), replicate the values of ExpCombined by sector
}
ExpIndex[,(nSectors*nItalianRegions-nSectors+1):(nSectors*nItalianRegions)]<-1         #all sectors of EXT have value=1
constant=c(1,2,4,6,8)
n_constant=length(constant)
decline=c(3,5,10,12)
n_decline=length(decline)
bad=c(7,9,11)
n_bad=length(bad)
## Final demand (pag. 13)
finalDemandItaTot=rowSums(IO[1:n,(n+1):(n+nFD*nItalianRegions)])           #final demand without changes in inventories and exports (The total demand faced by domestic sectors is the sum of intermediate demand)
Exports=(IO[1:(nItalianRegions*nSectors),ncol(IO)])                        #ncol(IO) means column=1010
finalDemandTot=rowSums(IO[1:n,(n+1):ncol(IO)])                             #final demand with exports and changes in inventories
Inv_indices=c(1:nItalianRegions)                                           #create a vector for investment index
Inv_indices=Inv_indices*15
Inv_indices=Inv_indices+c(0:(nItalianRegions-1))
Investment=rowSums(IO[1:(nItalianRegions*nSectors),(n+Inv_indices)])       #aggregate investment by sector. (n+Inv_indices) returns the exact number of column corresponding to gross investment
Cons_indices=c(rep(1:12,nItalianRegions))
indices_constant=c(rep(constant,nItalianRegions))
indices_decline=c(rep(decline,nItalianRegions))
indices_bad=c(rep(bad,nItalianRegions))
indices_1=c(rep(c(1),nItalianRegions))
indices_2=c(rep(c(2),nItalianRegions))
indices_3=c(rep(c(3),nItalianRegions))
indices_4=c(rep(c(4),nItalianRegions))
indices_5=c(rep(c(5),nItalianRegions))
indices_6=c(rep(c(6),nItalianRegions))
indices_7=c(rep(c(7),nItalianRegions))
indices_8=c(rep(c(8),nItalianRegions))
indices_9=c(rep(c(9),nItalianRegions))
indices_10=c(rep(c(10),nItalianRegions))
indices_11=c(rep(c(11),nItalianRegions))
indices_12=c(rep(c(12),nItalianRegions))
for(i in 1:nItalianRegions){
Cons_indices[((i-1)*12+1):((i-1)*12+12)]=Cons_indices[((i-1)*12+1):((i-1)*12+12)]+nFD*(i-1)
indices_constant[((i-1)*length(constant)+1):((i-1)*length(constant)+length(constant))]=indices_constant[((i-1)*length(constant)+1):((i-1)*length(constant)+length(constant))]+nFD*(i-1)
indices_decline[((i-1)*length(decline)+1):((i-1)*length(decline)+length(decline))]=indices_decline[((i-1)*length(decline)+1):((i-1)*length(decline)+length(decline))]+nFD*(i-1)
indices_bad[((i-1)*length(bad)+1):((i-1)*length(bad)+length(bad))]=indices_bad[((i-1)*length(bad)+1):((i-1)*length(bad)+length(bad))]+nFD*(i-1)
indices_1[(i)]=indices_1[(i)]+nFD*(i-1)
indices_2[(i)]=indices_2[(i)]+nFD*(i-1)
indices_3[(i)]=indices_3[(i)]+nFD*(i-1)
indices_4[(i)]=indices_4[(i)]+nFD*(i-1)
indices_5[(i)]=indices_5[(i)]+nFD*(i-1)
indices_6[(i)]=indices_6[(i)]+nFD*(i-1)
indices_7[(i)]=indices_7[(i)]+nFD*(i-1)
indices_8[(i)]=indices_8[(i)]+nFD*(i-1)
indices_9[(i)]=indices_9[(i)]+nFD*(i-1)
indices_10[(i)]=indices_10[(i)]+nFD*(i-1)
indices_11[(i)]=indices_11[(i)]+nFD*(i-1)
indices_12[(i)]=indices_12[(i)]+nFD*(i-1)
}
cons_columns=IO[1:(nItalianRegions*nSectors),n+Cons_indices]
cons_constant=IO[1:(nItalianRegions*nSectors),n+indices_constant]
cons_decline=IO[1:(nItalianRegions*nSectors),n+indices_decline]
cons_bad=IO[1:(nItalianRegions*nSectors),n+indices_bad]
cons_1=IO[1:(nItalianRegions*nSectors),n+indices_1]
cons_2=IO[1:(nItalianRegions*nSectors),n+indices_2]
cons_3=IO[1:(nItalianRegions*nSectors),n+indices_3]
cons_4=IO[1:(nItalianRegions*nSectors),n+indices_4]
cons_5=IO[1:(nItalianRegions*nSectors),n+indices_5]
cons_6=IO[1:(nItalianRegions*nSectors),n+indices_6]
cons_7=IO[1:(nItalianRegions*nSectors),n+indices_7]
cons_8=IO[1:(nItalianRegions*nSectors),n+indices_8]
cons_9=IO[1:(nItalianRegions*nSectors),n+indices_9]
cons_10=IO[1:(nItalianRegions*nSectors),n+indices_10]
cons_11=IO[1:(nItalianRegions*nSectors),n+indices_11]
cons_12=IO[1:(nItalianRegions*nSectors),n+indices_12]
cons=rowSums(IO[1:(nItalianRegions*nSectors),(n+Cons_indices)])
finalDemandExo=finalDemandTot-cons-Exports-Investment              #demand coming from abroad is exogenous but is "added" to final demand (that is why it is here subtracted)           #exogenous demand
cons_regions<-array(data=NA,dim=c((nItalianRegions*nSectors),nItalianRegions))
for(i in 1:nItalianRegions){
cons_regions[,i]<-rowSums(cons_columns[,((i-1)*12+1):((i-1)*12+12)])
}
cons_regions_endo<-array(data=NA,dim=c((nItalianRegions*nSectors),nItalianRegions))
for(i in 1:nrow(coefficienti_consumo)){
coeffs=coefficienti_consumo[i,]
for(j in 1:nItalianRegions){
cons_regions_endo[i,j]<-coeffs[((j-1)*nSectors+1):((j-1)*nSectors+nSectors)]%*%production[((j-1)*nSectors+1):((j-1)*nSectors+nSectors)]
}
}
cons_regions_exo=cons_regions-cons_regions_endo
Inv_shares=Investment/sum(Investment)                            #i^bar / iota' i^bar (pag. 13-14)
Investment=sum(Investment)
GDPinit=sum(IO[1:n,(n+1):(ncol(IO))])+sum(IO_noCons[905,(n+1):(ncol(IO_noCons))])-sum(IO[906,1:n]) #GDP initial: sum of all inputs + taxes/(subsidies) - imports
Taxes=sum(IO_noCons[905,(n+1):(ncol(IO_noCons))])                              #aggregate taxes
Tax=(IO_noCons[905,(n+1):(ncol(IO_noCons))])
Taxes_regions=c(rep(0,20))
for(i in 1:(nItalianRegions-1)){
Taxes_regions[i]<-sum(Tax[((i-1)*nFD+1):((i-1)*nFD+nFD)])
}
importCoeffs=IO[906,1:n]/production                              #calculate input coefficient concerning imports
outputIO<-rowSums(IO[1:n,])
GDPShocks=c(rep(0,nbRounds))
outputTotal=c(rep(0,nbRounds))
outputShocks=c(rep(0,nbRounds))
outputShocksSectors=array(0,dim=c(nbRounds,43))
outputShocksRegions=array(0,dim=c(nbRounds,20))
ratioShocks=c(rep(0,nbRounds))
ratioShocksSectors=array(0,dim=c(nbRounds,43))
ratioShocksRegions=array(0,dim=c(nbRounds,20))
nbParameters=7
parametersNames=c("speedInv","Inv","timeScale","Exp","c_c","c_d","c_b")
parameters=array(0,dim=c(n,nbParameters), dimnames=list(c(),parametersNames))
inventParams<-params[3:(nSectors+2)]
parameters[,"timeScale"]=rep(t(inventParams),nItalianRegions)
parameters[,"speedInv"]=1/parameters[,"timeScale"]
parameters[,"Inv"]=t(params[1])
parameters[,"Exp"]=t(params[2])
parameters[,"c_c"]=as.numeric(params[nSectors+3])
parameters[,"c_d"]=as.numeric(params[nSectors+4])
parameters[,"c_b"]=as.numeric(params[nSectors+5])
View(parameters)
as.numeric(params[nSectors+3])
params
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
Sample <- read_csv("../resources/Sample_FullParamSpace_REV1_DiffCons.csv")
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
MSMresults <- readRDS("MSM_REV1_DiffCons_EXP.rds")
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
View(MSMresults)
which(MSMresults==min(MSMresults[,1])
)
MSMresults<-na.omit(MSMresults
MSMresults<-na.omit(MSMresults)
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
Sample <- read_csv("../resources/Sample_FullParamSpace_REV1_DiffCons.csv")
MSMresults <- readRDS("MSM_REV1_DiffCons_EXP.rds")
MSMresults<-na.omit(MSMresults)
as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
params=as.numeric(Sample[which(MSMresults==min(MSMresults[,1])),1:length(Sample[which(MSMresults==min(MSMresults[,1])),])])
IO <- readRDS("../resources/IO_DiffCons.rds")
IO_noCons <- readRDS("../resources/IO_noCons.rds")
measures <- readRDS("../resources/measures_spese_flood.rds")
coefficienti_consumo <- readRDS("../resources/H.rds")
ExpService <- read_csv("../resources/ExportsServices2020_flood.csv",col_names = FALSE)
ExpService<-ExpService[-1,-1]
ExpSectoral <- read_csv("../resources/ExportsSectoral2020_flood.csv")
ExpSectoral<-ExpSectoral[,-(1:2)]
LD <- read_csv("../resources/lab_shocks_estimation_80rounds.csv")
matrix_gamma_flood_43sect<-readRDS("../resources/matrix_gamma_flood_43sect.rds")
epsilon <-matrix_gamma_flood_43sect
# mobility 80 weeks:
mobility <- as.data.frame(readRDS("../resources/weeklyMobility_flood.rds"))
mobility<-mobility[,3:22]
result<-runModel(IO,measures,coefficienti_consumo,params,nbRounds,LD,ExpService,ExpSectoral,epsilon,IO_noCons,mobility)
View(result)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/results/RunEstimatedModel.R")
View(prod_sectors_m)
load("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/results/Workspace_EST_functEpsilon.RData")
# unrestricted param space:
MSMresults <- readRDS("MSM_REV1_DiffCons_EXP_TradL.rds")
best <- which(MSMresults==min(MSMresults[,1]))
MSMresults[18346,1]
View(MSMresults[18346,1])
View(MSMresults[18346,])
View(MSMresults)
MSMResults==NA
r
MSMresults==NA
View(which(MSMresults[,1]==NA))
View(which(MSMresults[,]==NA))
which(MSMresults[,]==NA
)
sort(MSMresults[,1])
sort(MSMresults[,1][4]
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/results/RunEstimatedModel.R")
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/results/PlotsEstimation.R")
library(readr)
library(readxl)
## EMPIRICAL TIME SERIES FOR INDUSTRIAL PRODUCTION ##
IP <- as.data.frame(read_excel("../resources/IP2020_2021_flood.xlsx"))
rownames(IP)<-IP$`IO sector`
IP <- IP[,-1]
IP <- t(IP)
#IP_18 <- IP[-(19:24),]
IP_18 <- IP[-(13:24),]
## EMPIRICAL TIME SERIES FOR SERVICES ##
Service <- as.data.frame(read_excel("../resources/Services2020_2021_flood.xlsx"))
rownames(Service) <- Service$`IO sector`
Service <- Service[,-1]
Service <- t(Service)
#Service_18 <- Service[-(7:8),]
Service_18 <- Service[-(5:8),]
## EMPIRICAL TIME SERIES FOR EXPENDITURE ##
Expend <- read_excel("../resources/Expenditures_2020_2021_flood_REV1.xlsx")
Expend <- Expend[,-(1:2)]
Expend <- t(Expend)
Expend <- Expend[-(5:6),]
#Rank according to sector's size:
IO_ITAregions <- readRDS("../resources/IO_ITAregions.rds")
IO_ITAregions[-(904:906),]
x<-as.data.frame(rowSums(IO_ITAregions))
x$sector<-rep(1:43,21)
x<-as.data.frame(rowSums(IO_ITAregions))
View(x)
x$sector<-rep(1:43,21)
library(readr)
library(readxl)
## EMPIRICAL TIME SERIES FOR INDUSTRIAL PRODUCTION ##
IP <- as.data.frame(read_excel("../resources/IP2020_2021_flood.xlsx"))
rownames(IP)<-IP$`IO sector`
IP <- IP[,-1]
IP <- t(IP)
#IP_18 <- IP[-(19:24),]
IP_18 <- IP[-(13:24),]
## EMPIRICAL TIME SERIES FOR SERVICES ##
Service <- as.data.frame(read_excel("../resources/Services2020_2021_flood.xlsx"))
rownames(Service) <- Service$`IO sector`
Service <- Service[,-1]
Service <- t(Service)
#Service_18 <- Service[-(7:8),]
Service_18 <- Service[-(5:8),]
## EMPIRICAL TIME SERIES FOR EXPENDITURE ##
Expend <- read_excel("../resources/Expenditures_2020_2021_flood_REV1.xlsx")
Expend <- Expend[,-(1:2)]
Expend <- t(Expend)
Expend <- Expend[-(5:6),]
#Rank according to sector's size:
IO_ITAregions <- readRDS("../resources/IO_ITAregions.rds")
IO_ITAregions[-(904:906),]
x<-as.data.frame(rowSums(IO_ITAregions))
x$sector<-rep(1:43,21)
x$sector<-rep(1:43,20)
View(rep(1:43,21)
)
x$sector<-rep(1:43,21)
IO_ITAregions=IO_ITAregions[-(904:906),]
x<-as.data.frame(rowSums(IO_ITAregions))
x$sector<-rep(1:43,21)
y<-aggregate(x$x, list(x$sector), FUN=sum)
y<-aggregate(x$x, list(x$sector), FUN=sum)
y<-aggregate(x$x, list(x$sector), FUN=sum)
IO_ITAregions <- readRDS("../resources/IO_ITAregions.rds")
IO_ITAregions=IO_ITAregions[-(904:906),]
x<-as.data.frame(rowSums(IO_ITAregions))
x$sector<-rep(1:43,21)
y<-aggregate(x$x, list(x$sector), FUN=sum)
y<-aggregate(x, list(x$sector), FUN=sum)
View(y)
View(x)
View(x)
y<-aggregate(x, list(x$sector), FUN=sum)
View(y)
x$x
y<-aggregate(x$`rowSums(IO_ITAregions)`, list(x$sector), FUN=sum)
View(y)
sort(y)
View(y)
y[order(y$x),]
View(y[order(y$x),])
View(y[order(y$x, decreasing = TRUE),])
#Rank according to sector's size:
IO_ITAregions <- readRDS("../resources/IO_ITAregions.rds")
IO_ITAregions[-(904:906),]
x<-as.data.frame(rowSums(IO_ITAregions))
x$sector<-rep(1:43,21)
View(y)
IO_ITAregions <- readRDS("../resources/IO_ITAregions.rds")
IO_ITAregions <- IO_ITAregions[-(904:906),]
x<-as.data.frame(rowSums(IO_ITAregions))
x$sector<-rep(1:43,21)
y<-aggregate(x$`rowSums(IO_ITAregions)`, list(x$sector), FUN=sum)
y=y[order(y$x, decreasing = TRUE),]
View(y)
load("Workspace_EST_tradL.Rdata")
prod_sectors_Leontief=prod_sectors
prod_sectors_m_Leontief=prod_sectors_m
prod_sectors_q_Leontief=prod_sectors_q
expenditure_3_absolute_Leontief=expenditure_3_absolute
expenditure_m_Leontief=expenditure_m
expenditure_m_3_leontief=expenditure_m_3
expenditure_q_Leontief=expenditure_q_Leontief
#load the results of the simulation with the estimated parameters for the model with traditional Leontief p.f.
load("Workspace_EST_tradL.Rdata")
prod_sectors_Leontief=prod_sectors
prod_sectors_m_Leontief=prod_sectors_m
prod_sectors_q_Leontief=prod_sectors_q
expenditure_3_absolute_Leontief=expenditure_3_absolute
expenditure_m_Leontief=expenditure_m
expenditure_m_3_leontief=expenditure_m_3
expenditure_q_Leontief=expenditure_q
expenditure_q_3_Leontief=expenditure_q_3
#load the results of the simulation with the estimated parameters for the model with traditional Leontief p.f.
load("Workspace_EST_tradL.Rdata")
prod_sectors_Leontief=prod_sectors
prod_sectors_m_Leontief=prod_sectors_m
prod_sectors_q_Leontief=prod_sectors_q
expenditure_3_absolute_Leontief=expenditure_3_absolute
expenditure_m_Leontief=expenditure_m
expenditure_m_3_leontief=expenditure_m_3
expenditure_q_Leontief=expenditure_q
expenditure_q_3_Leontief=expenditure_q_3
#load the results of the simulation with the estimated parameters for the model with modified Leontief p.f.
load("Workspace_EST_functEpsilon1.Rdata")
jpeg("Est_IP1.jpeg", width = 2500, height = 1600, res = 150)
source("C:/Users/admpc/Dropbox/IRIO FLOOD MODEL-20241113T092626Z-001/IRIO FLOOD MODEL/Estimation/results/PlotsEstimation.R")
